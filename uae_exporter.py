# MIT License
#
# Copyright (c) 2019 Werner Punz
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
import sqlite3
import xml.etree.ElementTree as ET
import os
from builtins import Exception

from _lang_utils import save_fetch
import argparse

PUBLISHER = "publisher"
YEAR = "year"
NAME = "name"
UUID = "uuid"
THUMB_IMAGE = "thumb_image"
S5_IMAGE = "screen5_image"
S4_IMAGE = "screen4_image"
S3_IMAGE = "screen3_image"
S2_IMAGE = "screen2_image"
S1_IMAGE = "screen1_image"
TITLE_IMAGE = "title_image"
FRONT_IMAGE = "front_image"
IMAGES_FOUND = "images_found"


"""
    Central UAE exporter, which merges the image and sdb data
    generated by the uae-launcher and exports them into the emustation xml
"""


class UaeExporter:

    def __init__(self):

        parser = argparse.ArgumentParser(description='Point to the image dir and db file')

        parser.add_argument('--img_root', "-i",
                            dest='image_root',
                            required=True,
                            help='image dir')

        parser.add_argument('--db_root', "-d",
                            dest='db_root',
                            required=True,
                            help='define a sqlite3 db file')

        parser.add_argument('--out', "-o",
                            dest='out_file',
                            required=True,
                            help='output xml file')

        self.args = parser.parse_args()

        self.image_idx = dict()
        self.games = []
        self._load_table_data()
        self._load_images()
        self._merge_images()
        pass

    """
    Loads the table data from the 
    centralized loader games table
    """
    def _load_table_data(self):
        # create a database connection to a SQLite database
        conn = None
        try:
            conn = sqlite3.connect(self.args.db_root)
            cur = conn.cursor()
            cur.execute("SELECT name FROM sqlite_master WHERE type='table';")
            print(cur.fetchall())

            # cur.execute("SELECT *  FROM game")
            # print(cur.fetchall())

            rows = cur.fetchall()

            for row in rows:
                print(row)

            cur.execute(
                """
                SELECT uuid, name, year, publisher, front_image, title_image, screen1_image, screen2_image, 
                   screen3_image, screen4_image, screen5_image, thumb_image  FROM game 
                """
            )

            rows = cur.fetchall()
            for row in rows:
                dict_row = dict()
                dict_row[UUID] = row[0]
                dict_row[NAME] = row[1]
                dict_row[YEAR] = row[2]
                dict_row[PUBLISHER] = row[3]
                dict_row[FRONT_IMAGE] = row[4]
                dict_row[TITLE_IMAGE] = row[5]
                dict_row[S1_IMAGE] = row[6]
                dict_row[S2_IMAGE] = row[7]
                dict_row[S3_IMAGE] = row[8]
                dict_row[S4_IMAGE] = row[9]
                dict_row[S5_IMAGE] = row[10]
                dict_row[THUMB_IMAGE] = row[11]

                if dict_row[UUID] is not None and len(dict_row[UUID]) > 0:
                    self.games.append(dict_row)

            self.games.sort(key=lambda game: game[NAME])

        except Exception as e:
            print(e)
        finally:
            if conn:
                conn.close()

    """
    Walks the image dir and fetches the uuided images
    """
    def _load_images(self):

        for root, dirs, files in os.walk(self.args.image_root):
            for file in files:
                key = file.split("_")[0]
                if key in self.image_idx:
                    self.image_idx[key].append(root + os.sep + file)
                else:
                    image_storage = [root + os.sep + file]
                    self.image_idx[key] = image_storage

    """
    merge the images into the db
    """
    def _merge_images(self):
        for game in self.games:
            self._resolve_images(game, FRONT_IMAGE)
            self._resolve_images(game, TITLE_IMAGE)
            self._resolve_images(game, S1_IMAGE)
            self._resolve_images(game, S2_IMAGE)
            self._resolve_images(game, S3_IMAGE)
            self._resolve_images(game, S4_IMAGE)
            self._resolve_images(game, S5_IMAGE)
            self._resolve_images(game, THUMB_IMAGE)

    """
    helper which resolves the images if the exist
    """
    def _resolve_images(self, game, attr):
        image_key = game[attr]
        if image_key is not None and len(image_key) > 0 and image_key[5:] in self.image_idx:
            game[IMAGES_FOUND] = save_fetch(lambda: game[IMAGES_FOUND], [])
            game[IMAGES_FOUND].extend(self.image_idx[image_key[5:]])

    def to_xml(self):
        """
        example xml:

        <gameList>
            <game>
                <path>/home/pi/ROMs/nes/mm2.nes</path>
                <name>Mega Man 2</name>
                <desc>Mega Man 2 is a classic NES game which follows Mega Man as he murders eight robot masters in cold blood.</desc>
                <image>~/.emulationstation/downloaded_images/nes/Mega Man 2-image.png</image>
            </game>
        </gameList>
        """
        root = ET.Element("gameList")
        for game in self.games:
            x_game = ET.SubElement(root, "game")
            ET.SubElement(x_game, "path").text = game[UUID]
            ET.SubElement(x_game, "name").text = game[NAME]
            # ET.SubElement(x_game, "desc").text = "Publisher:" + game[PUBLISHER] + ", Year:" + game[YEAR]
            if IMAGES_FOUND in game:
                ET.SubElement(x_game, "image").text = game[IMAGES_FOUND][0]

        tree = ET.ElementTree(root)
        tree.write(self.args.out_file, encoding='utf8',  method='xml')
        print(ET.tostring(root, encoding='utf8', method='xml'))


exporter = UaeExporter()
exporter.to_xml()

